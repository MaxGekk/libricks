import org.json4s._
import org.json4s.jackson.JsonMethods._

/**
  *
  * @param token_id - token hash - sha256
  * @param creation_time - value returned by System.currentTimeMillis() when the token
  *                      was generated on server side. It is the difference,
  *                      measured in milliseconds, between the current time and midnight,
  *                      January 1, 1970 UTC.
  * @param expiry_time - creation_time + 1000 * lifetimeInSec where lifetimeInSec is
  *                    a parameter passed into [[Token.create()]]
  * @param comment - a comment passed into [[Token.create()]]
  */
case class TokenInfo(token_id: String,
                     creation_time: Long,
                     expiry_time: Long,
                     comment: String
                    )

/**
  * A pair of (token value, [[TokenInfo]]) returned when new token is generated by
  * Databricks token store.
  *
  * @param token_value - a random 128-bit value that can be used for authentication
  *                    at Databricks REST services
  * @param token_info - token meta-info
  */
case class NewToken(token_value: String, token_info: TokenInfo)

/**
  * Helper class for extracting of a list of token from json
  * @param token_infos - tokens meta-info [[TokenInfo]]
  */
case class TokenList(token_infos: List[TokenInfo])

/**
  * Proxy class for Databricks Token API
  * @param session - connection session to user's shard
  */
class Token(session: ShardSession) extends Endpoint {
  implicit val formats = DefaultFormats
  override def path: String = session.path + "/2.0/token"

  /**
    * Creates new token in the shard if the feature was enabled by Databricks Admin:
    * https://docs.databricks.com/administration-guide/admin-settings/tokens.html#enabling-tokens
    *
    * @param lifetimeInSec - expiration time (in seconds) associated with the new token
    * @param comment - comment associated with the new token.
    * @return [[NewToken]] - a pair of token value + its meta-info [[TokenInfo]]
    */
  def create(lifetimeInSec: Long, comment: String): NewToken = {
    val json = session.req(s"${path}/create", "post",
      s"""
         | {
         |   "lifetime_seconds": ${lifetimeInSec},
         |   "comment": "${comment}"
         | }
       """.stripMargin)
    val parsed = parse(json)
    parsed.extract[NewToken]
  }

  def delete(token_id: String): Boolean = {
    val json = session.req(s"${path}/delete", "post",
      s"""
         | {
         |   "token_id": "$token_id"
         | }
       """.stripMargin
    )
    val parsed = parse(json)
    parsed == JObject(List())
  }

  def list: List[TokenInfo] = {
    val json = session.req(s"${path}/list", "get")
    val parsed = parse(json)

    parsed.extract[TokenList].token_infos
  }
}
